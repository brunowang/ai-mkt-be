// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: filmclip/v1/filmclip.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Filmclip_CreatePlan_FullMethodName    = "/filmclip.v1.Filmclip/CreatePlan"
	Filmclip_UploadImage_FullMethodName   = "/filmclip.v1.Filmclip/UploadImage"
	Filmclip_GenClipScript_FullMethodName = "/filmclip.v1.Filmclip/GenClipScript"
)

// FilmclipClient is the client API for Filmclip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilmclipClient interface {
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanReply, error)
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error)
	GenClipScript(ctx context.Context, in *GenClipScriptRequest, opts ...grpc.CallOption) (*GenClipScriptReply, error)
}

type filmclipClient struct {
	cc grpc.ClientConnInterface
}

func NewFilmclipClient(cc grpc.ClientConnInterface) FilmclipClient {
	return &filmclipClient{cc}
}

func (c *filmclipClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlanReply)
	err := c.cc.Invoke(ctx, Filmclip_CreatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmclipClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadImageReply)
	err := c.cc.Invoke(ctx, Filmclip_UploadImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filmclipClient) GenClipScript(ctx context.Context, in *GenClipScriptRequest, opts ...grpc.CallOption) (*GenClipScriptReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenClipScriptReply)
	err := c.cc.Invoke(ctx, Filmclip_GenClipScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilmclipServer is the server API for Filmclip service.
// All implementations must embed UnimplementedFilmclipServer
// for forward compatibility.
type FilmclipServer interface {
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanReply, error)
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageReply, error)
	GenClipScript(context.Context, *GenClipScriptRequest) (*GenClipScriptReply, error)
	mustEmbedUnimplementedFilmclipServer()
}

// UnimplementedFilmclipServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilmclipServer struct{}

func (UnimplementedFilmclipServer) CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedFilmclipServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedFilmclipServer) GenClipScript(context.Context, *GenClipScriptRequest) (*GenClipScriptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenClipScript not implemented")
}
func (UnimplementedFilmclipServer) mustEmbedUnimplementedFilmclipServer() {}
func (UnimplementedFilmclipServer) testEmbeddedByValue()                  {}

// UnsafeFilmclipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilmclipServer will
// result in compilation errors.
type UnsafeFilmclipServer interface {
	mustEmbedUnimplementedFilmclipServer()
}

func RegisterFilmclipServer(s grpc.ServiceRegistrar, srv FilmclipServer) {
	// If the following call pancis, it indicates UnimplementedFilmclipServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Filmclip_ServiceDesc, srv)
}

func _Filmclip_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmclipServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filmclip_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmclipServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filmclip_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmclipServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filmclip_UploadImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmclipServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filmclip_GenClipScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenClipScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilmclipServer).GenClipScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filmclip_GenClipScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilmclipServer).GenClipScript(ctx, req.(*GenClipScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Filmclip_ServiceDesc is the grpc.ServiceDesc for Filmclip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filmclip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filmclip.v1.Filmclip",
	HandlerType: (*FilmclipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlan",
			Handler:    _Filmclip_CreatePlan_Handler,
		},
		{
			MethodName: "UploadImage",
			Handler:    _Filmclip_UploadImage_Handler,
		},
		{
			MethodName: "GenClipScript",
			Handler:    _Filmclip_GenClipScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filmclip/v1/filmclip.proto",
}
