// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: filmclip/v1/filmclip.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlanRequestMultiError, or nil if none found.
func (m *CreatePlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := CreatePlanRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreatePlanRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePlanRequestMultiError(errors)
	}

	return nil
}

// CreatePlanRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePlanRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlanRequestMultiError) AllErrors() []error { return m }

// CreatePlanRequestValidationError is the validation error returned by
// CreatePlanRequest.Validate if the designated constraints aren't met.
type CreatePlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlanRequestValidationError) ErrorName() string {
	return "CreatePlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlanRequestValidationError{}

// Validate checks the field values on CreatePlanReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePlanReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlanReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlanReplyMultiError, or nil if none found.
func (m *CreatePlanReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlanReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	if len(errors) > 0 {
		return CreatePlanReplyMultiError(errors)
	}

	return nil
}

// CreatePlanReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePlanReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePlanReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlanReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlanReplyMultiError) AllErrors() []error { return m }

// CreatePlanReplyValidationError is the validation error returned by
// CreatePlanReply.Validate if the designated constraints aren't met.
type CreatePlanReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlanReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlanReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlanReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlanReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlanReplyValidationError) ErrorName() string { return "CreatePlanReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePlanReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlanReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlanReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlanReplyValidationError{}

// Validate checks the field values on ListPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlanRequestMultiError, or nil if none found.
func (m *ListPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := ListPlanRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPlanRequestMultiError(errors)
	}

	return nil
}

// ListPlanRequestMultiError is an error wrapping multiple validation errors
// returned by ListPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlanRequestMultiError) AllErrors() []error { return m }

// ListPlanRequestValidationError is the validation error returned by
// ListPlanRequest.Validate if the designated constraints aren't met.
type ListPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlanRequestValidationError) ErrorName() string { return "ListPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlanRequestValidationError{}

// Validate checks the field values on ListPlanReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPlanReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlanReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPlanReplyMultiError, or
// nil if none found.
func (m *ListPlanReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlanReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPlanReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPlanReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPlanReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPlanReplyMultiError(errors)
	}

	return nil
}

// ListPlanReplyMultiError is an error wrapping multiple validation errors
// returned by ListPlanReply.ValidateAll() if the designated constraints
// aren't met.
type ListPlanReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlanReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlanReplyMultiError) AllErrors() []error { return m }

// ListPlanReplyValidationError is the validation error returned by
// ListPlanReply.Validate if the designated constraints aren't met.
type ListPlanReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlanReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlanReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlanReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlanReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlanReplyValidationError) ErrorName() string { return "ListPlanReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPlanReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlanReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlanReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlanReplyValidationError{}

// Validate checks the field values on QueryPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryPlanRequestMultiError, or nil if none found.
func (m *QueryPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := QueryPlanRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryPlanRequestMultiError(errors)
	}

	return nil
}

// QueryPlanRequestMultiError is an error wrapping multiple validation errors
// returned by QueryPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlanRequestMultiError) AllErrors() []error { return m }

// QueryPlanRequestValidationError is the validation error returned by
// QueryPlanRequest.Validate if the designated constraints aren't met.
type QueryPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlanRequestValidationError) ErrorName() string { return "QueryPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlanRequestValidationError{}

// Validate checks the field values on QueryPlanReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryPlanReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryPlanReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryPlanReplyMultiError,
// or nil if none found.
func (m *QueryPlanReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryPlanReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryPlanReplyValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryPlanReplyValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryPlanReplyValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QueryPlanReplyMultiError(errors)
	}

	return nil
}

// QueryPlanReplyMultiError is an error wrapping multiple validation errors
// returned by QueryPlanReply.ValidateAll() if the designated constraints
// aren't met.
type QueryPlanReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryPlanReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryPlanReplyMultiError) AllErrors() []error { return m }

// QueryPlanReplyValidationError is the validation error returned by
// QueryPlanReply.Validate if the designated constraints aren't met.
type QueryPlanReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryPlanReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryPlanReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryPlanReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryPlanReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryPlanReplyValidationError) ErrorName() string { return "QueryPlanReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryPlanReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryPlanReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryPlanReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryPlanReplyValidationError{}

// Validate checks the field values on PlanInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlanInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlanInfoMultiError, or nil
// if none found.
func (m *PlanInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	// no validation rules for Name

	// no validation rules for Step

	if len(errors) > 0 {
		return PlanInfoMultiError(errors)
	}

	return nil
}

// PlanInfoMultiError is an error wrapping multiple validation errors returned
// by PlanInfo.ValidateAll() if the designated constraints aren't met.
type PlanInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanInfoMultiError) AllErrors() []error { return m }

// PlanInfoValidationError is the validation error returned by
// PlanInfo.Validate if the designated constraints aren't met.
type PlanInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanInfoValidationError) ErrorName() string { return "PlanInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlanInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanInfoValidationError{}

// Validate checks the field values on PlanDetail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlanDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlanDetailMultiError, or
// nil if none found.
func (m *PlanDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PlanId

	// no validation rules for Name

	// no validation rules for Step

	// no validation rules for Images

	// no validation rules for Prompt

	for idx, item := range m.GetScenes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PlanDetailValidationError{
						field:  fmt.Sprintf("Scenes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PlanDetailValidationError{
						field:  fmt.Sprintf("Scenes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PlanDetailValidationError{
					field:  fmt.Sprintf("Scenes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ClipFrames

	// no validation rules for ClipVideos

	if len(errors) > 0 {
		return PlanDetailMultiError(errors)
	}

	return nil
}

// PlanDetailMultiError is an error wrapping multiple validation errors
// returned by PlanDetail.ValidateAll() if the designated constraints aren't met.
type PlanDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanDetailMultiError) AllErrors() []error { return m }

// PlanDetailValidationError is the validation error returned by
// PlanDetail.Validate if the designated constraints aren't met.
type PlanDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanDetailValidationError) ErrorName() string { return "PlanDetailValidationError" }

// Error satisfies the builtin error interface
func (e PlanDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanDetailValidationError{}

// Validate checks the field values on UploadImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadImageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageRequestMultiError, or nil if none found.
func (m *UploadImageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := UploadImageRequest_ImageType_name[int32(m.GetType())]; !ok {
		err := UploadImageRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := UploadImageRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UploadImageRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBase64()) < 1 {
		err := UploadImageRequestValidationError{
			field:  "Base64",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UploadImageRequestMultiError(errors)
	}

	return nil
}

// UploadImageRequestMultiError is an error wrapping multiple validation errors
// returned by UploadImageRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadImageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageRequestMultiError) AllErrors() []error { return m }

// UploadImageRequestValidationError is the validation error returned by
// UploadImageRequest.Validate if the designated constraints aren't met.
type UploadImageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageRequestValidationError) ErrorName() string {
	return "UploadImageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadImageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageRequestValidationError{}

// Validate checks the field values on UploadImageReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadImageReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadImageReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadImageReplyMultiError, or nil if none found.
func (m *UploadImageReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadImageReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return UploadImageReplyMultiError(errors)
	}

	return nil
}

// UploadImageReplyMultiError is an error wrapping multiple validation errors
// returned by UploadImageReply.ValidateAll() if the designated constraints
// aren't met.
type UploadImageReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadImageReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadImageReplyMultiError) AllErrors() []error { return m }

// UploadImageReplyValidationError is the validation error returned by
// UploadImageReply.Validate if the designated constraints aren't met.
type UploadImageReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadImageReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadImageReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadImageReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadImageReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadImageReplyValidationError) ErrorName() string { return "UploadImageReplyValidationError" }

// Error satisfies the builtin error interface
func (e UploadImageReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadImageReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadImageReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadImageReplyValidationError{}

// Validate checks the field values on ChangeClothingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeClothingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeClothingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeClothingRequestMultiError, or nil if none found.
func (m *ChangeClothingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeClothingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := ChangeClothingRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClothImage()) < 1 {
		err := ChangeClothingRequestValidationError{
			field:  "ClothImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHumanImage()) < 1 {
		err := ChangeClothingRequestValidationError{
			field:  "HumanImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeClothingRequestMultiError(errors)
	}

	return nil
}

// ChangeClothingRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeClothingRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeClothingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeClothingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeClothingRequestMultiError) AllErrors() []error { return m }

// ChangeClothingRequestValidationError is the validation error returned by
// ChangeClothingRequest.Validate if the designated constraints aren't met.
type ChangeClothingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeClothingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeClothingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeClothingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeClothingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeClothingRequestValidationError) ErrorName() string {
	return "ChangeClothingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeClothingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeClothingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeClothingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeClothingRequestValidationError{}

// Validate checks the field values on ChangeClothingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeClothingReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeClothingReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeClothingReplyMultiError, or nil if none found.
func (m *ChangeClothingReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeClothingReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeClothingReplyMultiError(errors)
	}

	return nil
}

// ChangeClothingReplyMultiError is an error wrapping multiple validation
// errors returned by ChangeClothingReply.ValidateAll() if the designated
// constraints aren't met.
type ChangeClothingReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeClothingReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeClothingReplyMultiError) AllErrors() []error { return m }

// ChangeClothingReplyValidationError is the validation error returned by
// ChangeClothingReply.Validate if the designated constraints aren't met.
type ChangeClothingReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeClothingReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeClothingReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeClothingReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeClothingReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeClothingReplyValidationError) ErrorName() string {
	return "ChangeClothingReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeClothingReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeClothingReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeClothingReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeClothingReplyValidationError{}

// Validate checks the field values on GenClipScriptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenClipScriptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipScriptRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipScriptRequestMultiError, or nil if none found.
func (m *GenClipScriptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipScriptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := GenClipScriptRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetActorImage()) < 1 {
		err := GenClipScriptRequestValidationError{
			field:  "ActorImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Prompt

	if len(errors) > 0 {
		return GenClipScriptRequestMultiError(errors)
	}

	return nil
}

// GenClipScriptRequestMultiError is an error wrapping multiple validation
// errors returned by GenClipScriptRequest.ValidateAll() if the designated
// constraints aren't met.
type GenClipScriptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipScriptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipScriptRequestMultiError) AllErrors() []error { return m }

// GenClipScriptRequestValidationError is the validation error returned by
// GenClipScriptRequest.Validate if the designated constraints aren't met.
type GenClipScriptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipScriptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipScriptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipScriptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipScriptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipScriptRequestValidationError) ErrorName() string {
	return "GenClipScriptRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipScriptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipScriptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipScriptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipScriptRequestValidationError{}

// Validate checks the field values on GenClipScriptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenClipScriptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipScriptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipScriptReplyMultiError, or nil if none found.
func (m *GenClipScriptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipScriptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetScenes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenClipScriptReplyValidationError{
						field:  fmt.Sprintf("Scenes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenClipScriptReplyValidationError{
						field:  fmt.Sprintf("Scenes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenClipScriptReplyValidationError{
					field:  fmt.Sprintf("Scenes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GenClipScriptReplyMultiError(errors)
	}

	return nil
}

// GenClipScriptReplyMultiError is an error wrapping multiple validation errors
// returned by GenClipScriptReply.ValidateAll() if the designated constraints
// aren't met.
type GenClipScriptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipScriptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipScriptReplyMultiError) AllErrors() []error { return m }

// GenClipScriptReplyValidationError is the validation error returned by
// GenClipScriptReply.Validate if the designated constraints aren't met.
type GenClipScriptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipScriptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipScriptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipScriptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipScriptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipScriptReplyValidationError) ErrorName() string {
	return "GenClipScriptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipScriptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipScriptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipScriptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipScriptReplyValidationError{}

// Validate checks the field values on SceneScript with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SceneScript) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SceneScript with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SceneScriptMultiError, or
// nil if none found.
func (m *SceneScript) ValidateAll() error {
	return m.validate(true)
}

func (m *SceneScript) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for Description

	// no validation rules for Actions

	// no validation rules for ShotType

	if len(errors) > 0 {
		return SceneScriptMultiError(errors)
	}

	return nil
}

// SceneScriptMultiError is an error wrapping multiple validation errors
// returned by SceneScript.ValidateAll() if the designated constraints aren't met.
type SceneScriptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SceneScriptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SceneScriptMultiError) AllErrors() []error { return m }

// SceneScriptValidationError is the validation error returned by
// SceneScript.Validate if the designated constraints aren't met.
type SceneScriptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SceneScriptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SceneScriptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SceneScriptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SceneScriptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SceneScriptValidationError) ErrorName() string { return "SceneScriptValidationError" }

// Error satisfies the builtin error interface
func (e SceneScriptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSceneScript.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SceneScriptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SceneScriptValidationError{}

// Validate checks the field values on GenClipFrameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenClipFrameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipFrameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipFrameRequestMultiError, or nil if none found.
func (m *GenClipFrameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipFrameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := GenClipFrameRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetScenes()) < 1 {
		err := GenClipFrameRequestValidationError{
			field:  "Scenes",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenClipFrameRequestMultiError(errors)
	}

	return nil
}

// GenClipFrameRequestMultiError is an error wrapping multiple validation
// errors returned by GenClipFrameRequest.ValidateAll() if the designated
// constraints aren't met.
type GenClipFrameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipFrameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipFrameRequestMultiError) AllErrors() []error { return m }

// GenClipFrameRequestValidationError is the validation error returned by
// GenClipFrameRequest.Validate if the designated constraints aren't met.
type GenClipFrameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipFrameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipFrameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipFrameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipFrameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipFrameRequestValidationError) ErrorName() string {
	return "GenClipFrameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipFrameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipFrameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipFrameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipFrameRequestValidationError{}

// Validate checks the field values on GenClipFrameReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenClipFrameReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipFrameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipFrameReplyMultiError, or nil if none found.
func (m *GenClipFrameReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipFrameReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenClipFrameReplyMultiError(errors)
	}

	return nil
}

// GenClipFrameReplyMultiError is an error wrapping multiple validation errors
// returned by GenClipFrameReply.ValidateAll() if the designated constraints
// aren't met.
type GenClipFrameReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipFrameReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipFrameReplyMultiError) AllErrors() []error { return m }

// GenClipFrameReplyValidationError is the validation error returned by
// GenClipFrameReply.Validate if the designated constraints aren't met.
type GenClipFrameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipFrameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipFrameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipFrameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipFrameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipFrameReplyValidationError) ErrorName() string {
	return "GenClipFrameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipFrameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipFrameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipFrameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipFrameReplyValidationError{}

// Validate checks the field values on GenClipVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenClipVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipVideoRequestMultiError, or nil if none found.
func (m *GenClipVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlanId()) < 1 {
		err := GenClipVideoRequestValidationError{
			field:  "PlanId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetScenes()) < 1 {
		err := GenClipVideoRequestValidationError{
			field:  "Scenes",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenClipVideoRequestMultiError(errors)
	}

	return nil
}

// GenClipVideoRequestMultiError is an error wrapping multiple validation
// errors returned by GenClipVideoRequest.ValidateAll() if the designated
// constraints aren't met.
type GenClipVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipVideoRequestMultiError) AllErrors() []error { return m }

// GenClipVideoRequestValidationError is the validation error returned by
// GenClipVideoRequest.Validate if the designated constraints aren't met.
type GenClipVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipVideoRequestValidationError) ErrorName() string {
	return "GenClipVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipVideoRequestValidationError{}

// Validate checks the field values on GenClipVideoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenClipVideoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenClipVideoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenClipVideoReplyMultiError, or nil if none found.
func (m *GenClipVideoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenClipVideoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenClipVideoReplyMultiError(errors)
	}

	return nil
}

// GenClipVideoReplyMultiError is an error wrapping multiple validation errors
// returned by GenClipVideoReply.ValidateAll() if the designated constraints
// aren't met.
type GenClipVideoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenClipVideoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenClipVideoReplyMultiError) AllErrors() []error { return m }

// GenClipVideoReplyValidationError is the validation error returned by
// GenClipVideoReply.Validate if the designated constraints aren't met.
type GenClipVideoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenClipVideoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenClipVideoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenClipVideoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenClipVideoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenClipVideoReplyValidationError) ErrorName() string {
	return "GenClipVideoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenClipVideoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenClipVideoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenClipVideoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenClipVideoReplyValidationError{}
